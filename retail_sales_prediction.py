# -*- coding: utf-8 -*-
"""retail_sales_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YAbjBG566H_87exwXrGwik-FR1E5KsM_

##Task1 -- Predict the department-wide sales for each store for the following year
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot  as plt
import plotly.express as px
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score,mean_absolute_error
from sklearn.preprocessing import OrdinalEncoder
from sklearn.tree import DecisionTreeRegressor
from xgboost import XGBRegressor
from sklearn.neighbors import KNeighborsRegressor
from sklearn.svm import SVR
from sklearn.model_selection import GridSearchCV,RandomizedSearchCV

final_data = pd.read_csv("/content/final_retail_data.csv",encoding='utf-8')

final_data

final_data['Type'].unique()

final_data['IsHoliday'].unique()

#Encoding the catergorical column data - Type and IsHoliday

eng = OrdinalEncoder()

final_data['Type'] = eng.fit_transform(final_data[['Type']])
final_data['IsHoliday'] = eng.fit_transform(final_data[['IsHoliday']])

final_data['Type'].unique()

final_data['IsHoliday'].unique()

sns.heatmap(data=final_data.corr(), annot=True, fmt=".1f")
plt.title('Heatmap of correlations for transformed data')

plt.figure(figsize=(15,3))
final_data.groupby('Date')['Weekly_Sales'].mean().plot()
plt.title('Average weekly Sales of the company across all stores in given timeframe', fontsize=18)
plt.ylabel('Sales', fontsize=16)
plt.xlabel('Date', fontsize=16);

final_data.columns

task1_df = final_data[["Store","Dept","Year","Weekly_Sales"]]

task1_df

task1_df['Year'].unique()

y = task1_df['Weekly_Sales']
x = task1_df.drop(['Weekly_Sales'], axis = 1)
#splitting the data
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.2)

x_train.shape, x_test.shape, y_train.shape, y_test.shape

def evaluate_model(model, x_train, y_train, x_test, y_test):
    # fit the model
    model.fit(x_train, y_train)

    # predict the values using training data
    train_pred = model.predict(x_train)

    # evaluate using training data
    train_mae = mean_absolute_error(y_train, train_pred)
    train_r2score = r2_score(y_train, train_pred)

    # print the results of the training data
    print("Results of the training data\n")
    #print("Mean Absolute Error: {:.2f}".format(train_mae))
    #print("R2 Score: {:.2f}\n".format(train_r2score))

    train_score = pd.DataFrame([train_mae,train_r2score],columns=['score'],index=['MAE','R2 score'])

    print(train_score,"\n")
    # predict the values using testing data
    test_pred = model.predict(x_test)

    # evaluate using testing data
    test_mae = mean_absolute_error(y_test, test_pred)
    test_r2score = r2_score(y_test, test_pred)

    # print the results of the testing data
    print("Results of the testing data\n")
    #print("Mean Absolute Error: {:.2f}".format(test_mae))
    #print("R2 Score: {:.2f}\n".format(test_r2score))

    test_score = pd.DataFrame([test_mae,test_r2score],columns=['score'],index=['MAE','R2 score'])

    try:
        feat_imp = model.feature_importances_
        plt.bar(x_train.columns,feat_imp,color='green')
        plt.title('Feature Importance graph')
        plt.xticks(rotation=45)
    except:
        pass

    print(test_score)
    return test_r2score, test_mae

dtr = DecisionTreeRegressor()
dtr_testing_r2score, dtr_testing_mae = evaluate_model(dtr, x_train, y_train, x_test, y_test)

rf = RandomForestRegressor()
rf_testing_r2score, rf_testing_mae = evaluate_model(rf, x_train, y_train, x_test, y_test)

knn = KNeighborsRegressor()
knn_testing_r2score,knn_testing_mae = evaluate_model(knn, x_train, y_train, x_test, y_test)

xgb = XGBRegressor()
xgb_testing_r2score,xgb_testing_mae = evaluate_model(xgb, x_train, y_train, x_test, y_test)

models = pd.DataFrame({
    'Model': ["DecisionTreeRegressor", 'RandomForest Regression','KNeighbours Regression','XGBRegression' ],
    'R2_Score': [dtr_testing_r2score, rf_testing_r2score, knn_testing_r2score,xgb_testing_r2score],
    'MAE' : [dtr_testing_mae, rf_testing_mae, knn_testing_mae,xgb_testing_mae]
})
models.style.background_gradient(cmap='Blues')

rf_predict_sales = rf.predict(np.array([[45,95,2013]]))
dtr_predict_sales = dtr.predict(np.array([[45,95,2013]]))
knn_predict_sales = knn.predict(np.array([[45,95,2013]]))
xgb_predict_sales = xgb.predict(np.array([[45,95,2013]]))

prediction = pd.DataFrame({
    'Model': ["DecisionTreeRegressor", 'RandomForest Regression','KNeighbours Regression','XGBRegression' ],
    'Weekly_Sales_Prediction':[*dtr_predict_sales,*rf_predict_sales,*knn_predict_sales,*xgb_predict_sales]
})
prediction.style.background_gradient(cmap='Greens')

df_top_stores= task1_df.groupby(by=['Store'], as_index= False)['Weekly_Sales'].sum()

df_top_stores

"""##Task2 -- Model the effects of markdowns on holiday weeks"""

task2_df = final_data.copy()

task2_df.info()

task2_df.columns

task2_df['Date'].head(5)

task2_df['Date'].tail(5)

task2_df['Date'].unique()

sns.barplot(x='IsHoliday', y='Weekly_Sales', data=task2_df)

Visualizing the holiday effects over sales

holiday = task2_df[task2_df['IsHoliday']==True]
non_holiday = task2_df[task2_df['IsHoliday']!=True]

print(len(holiday))

print(len(non_holiday))

sns.boxplot(x = holiday
            )

sns.barplot(x='Christmas', y='Weekly_Sales', data=task2_df)

# Super bowl dates
task2_df.loc[(task2_df['Date'] == '2010-02-12')|(task2_df['Date'] == '2011-02-11')|(task2_df['Date'] == '2012-02-10'),'Super_Bowl'] = True
task2_df.loc[(task2_df['Date'] != '2010-02-12')&(task2_df['Date'] != '2011-02-11')&(task2_df['Date'] != '2012-02-10'),'Super_Bowl'] = False

# Labor day dates
task2_df.loc[(task2_df['Date'] == '2010-09-10')|(task2_df['Date'] == '2011-09-09')|(task2_df['Date'] == '2012-09-07'),'Labor_Day'] = True
task2_df.loc[(task2_df['Date'] != '2010-09-10')&(task2_df['Date'] != '2011-09-09')&(task2_df['Date'] != '2012-09-07'),'Labor_Day'] = False

# Thanksgiving dates
task2_df.loc[(task2_df['Date'] == '2010-11-26')|(task2_df['Date'] == '2011-11-25'),'Thanksgiving'] = True
task2_df.loc[(task2_df['Date'] != '2010-11-26')&(task2_df['Date'] != '2011-11-25'),'Thanksgiving'] = False

#Christmas dates in train set
task2_df.loc[(task2_df['Date'] == '2010-12-31')|(task2_df['Date'] == '2011-12-30'),'Christmas'] = True
task2_df.loc[(task2_df['Date'] != '2010-12-31')&(task2_df['Date'] != '2011-12-30'),'Christmas'] = False



Christmas1 = pd.Timestamp(2010,12,25)
Christmas2 = pd.Timestamp(2011,12,25)
Christmas3 = pd.Timestamp(2012,12,25)

Thanksgiving1=pd.Timestamp(2010,11,23)
Thanksgiving2=pd.Timestamp(2011,11,23)
Thanksgiving3=pd.Timestamp(2012,11,23)



sns.barplot(x='Christmas', y='Weekly_Sales', data=task2_df)

sns.barplot(x='Thanksgiving', y='Weekly_Sales', data=task2_df)

labels = 'Not-Affected' , 'Affected'
sizes = task2_df.IsHoliday.value_counts()
colors = ['gold', 'silver']
explode = (0.1, 0.0)
plt.pie(sizes, explode=explode, labels=labels, colors=colors,
        autopct='%1.1f%%', shadow=True, startangle=180)
plt.axis('equal')
plt.title("Sales Affected by Schoolholiday or Not ?",fontsize=20)
plt.plot()
fig=plt.gcf()
fig.set_size_inches(6,6)
plt.show()